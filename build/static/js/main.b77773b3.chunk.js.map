{"version":3,"sources":["index.js"],"names":["tf","require","names","App","state","model","preview","predictions","onDrop","accepted","rejected","links","_this","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","_this$state$model$inp","inputs","shape","slice","_this$state$model$inp2","Object","D_LeafDetectionWebApp_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","modelWidth","modelHeight","input","tidy","resizeBilinear","browser","fromPixels","div","expandDims","executeAsync","then","res","font","textBaseline","i","_res","boxes","scores","classes","valid_detections","boxes_data","dataSync","scores_data","classes_data","valid_detections_data","dispose","_boxes_data$slice","_boxes_data$slice2","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","_boxes_data$slice3","_boxes_data$slice4","fillText","_this2","this","title","loadGraphModel","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","react_magic_dropzone__WEBPACK_IMPORTED_MODULE_8___default","accept","multiple","alt","onLoad","src","id","React","Component","rootElement","ReactDOM","render"],"mappings":"6OAKMA,UAAKC,EAAQ,MAIbC,EAAQ,CAAC,SAAU,UAAW,QAAS,gBAAiB,SAAU,UAElEC,6MACJC,MAAQ,CACNC,MAAO,KACPC,QAAS,GACTC,YAAa,MAYfC,OAAS,SAACC,EAAUC,EAAUC,GAC5BC,EAAKC,SAAS,CAAEP,QAASG,EAAS,GAAGH,SAAWK,EAAM,QAGxDG,aAAe,SAACC,EAAOC,EAAQC,GAC7B,IAAMC,EAAeH,EAAMG,aACrBC,EAAgBJ,EAAMI,cAK5BF,EAAIG,UAAU,EAAG,EAAGH,EAAID,OAAOK,MAAOJ,EAAID,OAAOM,QACjDL,EAAIM,UAAY,UAChBN,EAAIO,SAAS,EAAG,EAAGR,EAAOK,MAAOL,EAAOM,QACxC,IAAMG,EAAQC,KAAKC,IAAIX,EAAOK,MAAQN,EAAMG,aAAcF,EAAOM,OAASP,EAAMI,eAC1ES,EAAWF,KAAKG,MAAMX,EAAeO,GACrCK,EAAYJ,KAAKG,MAAMV,EAAgBM,GAC7CR,EAAIc,UACFhB,EACA,EACA,EACAG,EACAC,GACCH,EAAOK,MAAQO,GAAY,GAC3BZ,EAAOM,OAASQ,GAAa,EAC9BF,EACAE,MAKJE,cAAgB,SAAAC,GACd,IAAMC,EAAIC,SAASC,eAAe,UAC5BnB,EAAMiB,EAAEG,WAAW,MACzBzB,EAAKE,aAAamB,EAAEK,OAAQJ,EAAGjB,GAHZ,IAAAsB,EAIa3B,EAAKR,MAAMC,MAAMmC,OAAO,GAAGC,MAAMC,MAAM,EAAG,GAJvDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAIdO,EAJcH,EAAA,GAIFI,EAJEJ,EAAA,GAKbK,EAAQhD,EAAGiD,KAAK,WACpB,OAAOjD,EAAGe,MAAMmC,eAAelD,EAAGmD,QAAQC,WAAWlB,GAAI,CAACY,EAAYC,IACnEM,IAAI,KAAOC,WAAW,KAE3B1C,EAAKR,MAAMC,MAAMkD,aAAaP,GAAOQ,KAAK,SAAAC,GAExC,IAAMC,EAAO,kBACbzC,EAAIyC,KAAOA,EACXzC,EAAI0C,aAAe,MAJ4B,IAc3CC,EAd2CC,EAAAjB,OAAAC,EAAA,EAAAD,CAMIa,EANJ,GAMxCK,EANwCD,EAAA,GAMjCE,EANiCF,EAAA,GAMzBG,EANyBH,EAAA,GAMhBI,EANgBJ,EAAA,GAOzCK,EAAaJ,EAAMK,WACnBC,EAAcL,EAAOI,WACrBE,EAAeL,EAAQG,WACvBG,EAAwBL,EAAiBE,WAAW,GAK1D,IAHAnE,EAAGuE,QAAQd,GAGNG,EAAI,EAAGA,EAAIU,IAAyBV,EAAE,KAAAY,EAClBN,EAAWxB,MAAU,EAAJkB,EAAiB,GAATA,EAAI,IADXa,EAAA7B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GACpCE,EADoCD,EAAA,GAChCE,EADgCF,EAAA,GAC5BG,EAD4BH,EAAA,GACxBI,EADwBJ,EAAA,GAEzCC,GAAMxC,EAAEb,MACRuD,GAAM1C,EAAEb,MACRsD,GAAMzC,EAAEZ,OAER,IAAMD,EAAQuD,EAAKF,EACbpD,GAFNuD,GAAM3C,EAAEZ,QAEYqD,EACdG,EAAQ5E,EAAMmE,EAAaT,IAC3BmB,EAAQX,EAAYR,GAAGoB,QAAQ,GAGrC/D,EAAIgE,YAAc,UAClBhE,EAAIiE,UAAY,EAChBjE,EAAIkE,WAAWT,EAAIC,EAAItD,EAAOC,GAG9BL,EAAIM,UAAY,UAChB,IAAM6D,EAAYnE,EAAIoE,YAAYP,EAAQ,IAAMC,GAAO1D,MACjDiE,EAAaC,SAAS7B,EAAM,IAClCzC,EAAIO,SAASkD,EAAIC,EAAIS,EAAY,EAAGE,EAAa,GAGnD,IAAK1B,EAAI,EAAGA,EAAIU,IAAyBV,EAAE,KAAA4B,EACtBtB,EAAWxB,MAAU,EAAJkB,EAAiB,GAATA,EAAI,IADP6B,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GACpCd,EADoCe,EAAA,GAChCd,EADgCc,EAAA,GAEzCf,GAAMxC,EAAEb,MACRsD,GAAMzC,EAAEZ,OACR,IAAMwD,EAAQ5E,EAAMmE,EAAaT,IAC3BmB,EAAQX,EAAYR,GAAGoB,QAAQ,GAGrC/D,EAAIM,UAAY,UAChBN,EAAIyE,SAASZ,EAAQ,IAAMC,EAAOL,EAAIC,0FAhGxB,IAAAgB,EAAAC,KAClBzD,SAAS0D,MAAQ,4CACjB7F,EAAG8F,eAbS,yBAaetC,KAAK,SAAAnD,GAC9BsF,EAAK9E,SAAS,CACZR,MAAOA,uCAmGX,OACE0F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZN,KAAKxF,MAAMC,MACV0F,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,WACVE,OAAO,2CACPC,UAAU,EACV7F,OAAQoF,KAAKpF,QAEZoF,KAAKxF,MAAME,QACVyF,EAAAC,EAAAC,cAAA,OACEK,IAAI,iBACJC,OAAQX,KAAK5D,cACbkE,UAAU,eACVM,IAAKZ,KAAKxF,MAAME,UAGlB,yBAEFyF,EAAAC,EAAAC,cAAA,UAAQQ,GAAG,SAASpF,MAAM,MAAMC,OAAO,SAGzCyE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,4BApIQQ,IAAMC,WA2IlBC,EAAczE,SAASC,eAAe,QAC5CyE,IAASC,OAAOf,EAAAC,EAAAC,cAAC9F,EAAD,MAASyG","file":"static/js/main.b77773b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MagicDropzone from \"react-magic-dropzone\";\r\n\r\nimport \"./styles.css\";\r\nconst tf = require('@tensorflow/tfjs');\r\n\r\nconst weights = '/web_model/model.json';\r\n\r\nconst names = ['Kamyas', 'Oregano', 'Mango', 'Golden Photos', 'Croton', 'person']\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    model: null,\r\n    preview: \"\",\r\n    predictions: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.title = \"Digital Image Processing Plant Identifier\"\r\n    tf.loadGraphModel(weights).then(model => {\r\n      this.setState({\r\n        model: model\r\n      });\r\n    });\r\n  }\r\n\r\n  onDrop = (accepted, rejected, links) => {\r\n    this.setState({ preview: accepted[0].preview || links[0] });\r\n  };\r\n\r\n  cropToCanvas = (image, canvas, ctx) => {\r\n    const naturalWidth = image.naturalWidth;\r\n    const naturalHeight = image.naturalHeight;\r\n\r\n    // canvas.width = image.width;\r\n    // canvas.height = image.height;\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    const ratio = Math.min(canvas.width / image.naturalWidth, canvas.height / image.naturalHeight);\r\n    const newWidth = Math.round(naturalWidth * ratio);\r\n    const newHeight = Math.round(naturalHeight * ratio);\r\n    ctx.drawImage(\r\n      image,\r\n      0,\r\n      0,\r\n      naturalWidth,\r\n      naturalHeight,\r\n      (canvas.width - newWidth) / 2,\r\n      (canvas.height - newHeight) / 2,\r\n      newWidth,\r\n      newHeight,\r\n    );\r\n\r\n  };\r\n\r\n  onImageChange = e => {\r\n    const c = document.getElementById(\"canvas\");\r\n    const ctx = c.getContext(\"2d\");\r\n    this.cropToCanvas(e.target, c, ctx);\r\n    let [modelWidth, modelHeight] = this.state.model.inputs[0].shape.slice(1, 3);\r\n    const input = tf.tidy(() => {\r\n      return tf.image.resizeBilinear(tf.browser.fromPixels(c), [modelWidth, modelHeight])\r\n        .div(255.0).expandDims(0);\r\n    });\r\n    this.state.model.executeAsync(input).then(res => {\r\n      // Font options.\r\n      const font = \"16px sans-serif\";\r\n      ctx.font = font;\r\n      ctx.textBaseline = \"top\";\r\n\r\n      const [boxes, scores, classes, valid_detections] = res;\r\n      const boxes_data = boxes.dataSync();\r\n      const scores_data = scores.dataSync();\r\n      const classes_data = classes.dataSync();\r\n      const valid_detections_data = valid_detections.dataSync()[0];\r\n\r\n      tf.dispose(res)\r\n\r\n      var i;\r\n      for (i = 0; i < valid_detections_data; ++i){\r\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\r\n        x1 *= c.width;\r\n        x2 *= c.width;\r\n        y1 *= c.height;\r\n        y2 *= c.height;\r\n        const width = x2 - x1;\r\n        const height = y2 - y1;\r\n        const klass = names[classes_data[i]];\r\n        const score = scores_data[i].toFixed(2);\r\n\r\n        // Draw the bounding box.\r\n        ctx.strokeStyle = \"#00FFFF\";\r\n        ctx.lineWidth = 4;\r\n        ctx.strokeRect(x1, y1, width, height);\r\n\r\n        // Draw the label background.\r\n        ctx.fillStyle = \"#00FFFF\";\r\n        const textWidth = ctx.measureText(klass + \":\" + score).width;\r\n        const textHeight = parseInt(font, 10); // base 10\r\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\r\n\r\n      }\r\n      for (i = 0; i < valid_detections_data; ++i){\r\n        let [x1, y1, , ] = boxes_data.slice(i * 4, (i + 1) * 4);\r\n        x1 *= c.width;\r\n        y1 *= c.height;\r\n        const klass = names[classes_data[i]];\r\n        const score = scores_data[i].toFixed(2);\r\n\r\n        // Draw the text last to ensure it's on top.\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.fillText(klass + \":\" + score, x1, y1);\r\n\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Dropzone-page\">\r\n        {this.state.model ? (\r\n          <MagicDropzone\r\n            className=\"Dropzone\"\r\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\r\n            multiple={false}\r\n            onDrop={this.onDrop}\r\n          >\r\n            {this.state.preview ? (\r\n              <img\r\n                alt=\"upload preview\"\r\n                onLoad={this.onImageChange}\r\n                className=\"Dropzone-img\"\r\n                src={this.state.preview}\r\n              />\r\n            ) : (\r\n              \"Choose or drop a file.\"\r\n            )}\r\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\r\n          </MagicDropzone>\r\n        ) : (\r\n          <div className=\"Dropzone\">Loading model...</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}